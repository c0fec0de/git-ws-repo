[project]
name = "git-ws-repo"
dynamic = ["version"]
description = "Google's git-repo replacement powered by git-ws"
authors = [
    {name = "c0fec0de", email = "c0fec0de@gmail.com"},
]
dependencies = [
    "defusedxml>=0.7.1",
    "git-ws>=2.0.3",
]
requires-python = ">=3.9.2,<4.0"
readme = "README.md"
license = {text = "LGPL-3.0-or-later"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]

[project.urls]
"Homepage" = "https://github.com/c0fec0de/git-ws-repo"
"Documentation" = "https://git-ws-repo.readthedocs.io/en/stable/"
"Bug Tracker" = "https://github.com/c0fec0de/git-ws-repo/issues"

[project.scripts]
repo = "gitwsrepo._cli:main"

[project.entry-points."gitws.manifestformat"]
RepoManifestFormat = 'gitwsrepo.repomanifestformat:RepoManifestFormat'

[dependency-groups]
dev = [
    "contextlib-chdir>=1.0.2",
    "coveralls>=3.3.1",
    "mypy>=1.9.0",
    "pre-commit>=4.2.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "ruff>=0.11.2",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx>=5.3.0",
    "sphinxemoji>=0.3.1",
    "test2ref>=0.4.2",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.build]
includes = ["src/gitwsrepo"]

[tool.pdm.version]
source = "scm"
fallback_version = "0.0.0"

[tool.ruff]
line-length = 120
fix = true
target-version = "py39"

[tool.ruff.lint]
select = [
    # isort
    "I",
    # pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # pydocstyle
    "D",
    # pep8-naming
    "N",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-gettext
    "INT",
    # pylint
    "PL",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # tidy imports
    "TID",
    # implicit string concatenation
    "ISC",
    # type-checking imports
    "TC",
    # comprehensions
    "C",
    "C4",
    # pygrep-hooks
    "PGH",
    # Ruff-specific rules
    "RUF",
    # flake8-bandit: exec-builtin
    "S102",
    # numpy-legacy-random
    "NPY002",
    # Perflint
    "PERF",
    # flynt
    "FLY",
    # flake8-logging-format
    "G",
    # pyupgrade
    "UP",
    # annotation
    # "ANN"
    # bandit
    "S",
    # Argument
    # "ARG",
    # Pathlib
    "PTH",
    # Simplify
    # "SIM",
    # Return
    "RET",
    # Raise
    "RSE",
]
ignore = [
    # too-many-arguments
    'PLR0913',
    # Ambiguous doc
    'D203', 'D212', 'D402', 'D406',
    # Multiline doc is ok.
    'D200',
    # We use the class for constructor doc
    'D107',
    # Magic Method Documentation is optional
    'D105',
    # We use faster isinstance checks
    'UP038',
    # Assert
    'S101',
    # Type-Checking
    'TC001',
    # Indent of doctest
    'D412',
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Magic Values
    "PLR2004",
    # Argument
    "ARG001",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts ="""
    --cov src/gitwsrepo
    --cov-report term
    --cov-report html
    --doctest-glob=docs/*.rst
    --doctest-modules
    --ignore-glob=tests/testdata*
    --ignore=docs/conf.py
    --junitxml=report.xml
    --log-level=INFO
"""
filterwarnings = [
    "error",
]

[tool.coverage.report]
exclude_lines = [
    'return NotImplemented',
    'raise NotImplementedError()',
    'pragma: no cover',
    'assert False',
]

[tool.mypy]
disable_error_code = "misc"
ignore_missing_imports = true
plugins = "pydantic.mypy"

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
